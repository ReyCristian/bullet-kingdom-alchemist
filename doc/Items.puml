@startuml Items

enum Rareza {
  comun
  raro
  muy_raro
  super_raro
  rarisimo
}

Rareza <-- Item

enum Grupo {
  Espada
  Hacha
  Lanza
  Arco
  Daga_arrojadiza
  Hacha_arrojadiza
  Escudo
  Varita
  Bumerang
  Casco
  Pechera
  Botas
  Chatarra
  Maderita
  Cuero
}

Grupo <-- TipoItem 

class Resource

class Item {
  - nombre: String
  - peso: float
  - rareza: Rareza
  - tipo: TipoItem
}

class Equipable {
  + atributos:Atributo[]
  - nodo_instanciado: Node
  + equipar(personaje: Node): void
  + desequipar(personaje: Node): void
  + procesar(delta: float): void
}

class Arma {
  - daño_base: int
  - cooldown: float
  - cooldown_timer: Timer
  + usar(): void
  + esta_listo(): bool
  + procesar_fisica(delta: float): void
}

class Armadura {
  + obtener_slot(): int
}

class Recurso {
}

class Hechizo {
  - objetivo: Objetivo
}

class ArmaRango {
  - proyectil: PackedScene
  + usar(): void
  + procesar_fisica(delta: float): void
}

class ArmaMele {
  + usar(): void
  + procesar_fisica(delta: float): void
}

class ArmaArea {
  - radio: float
  + usar(): void
  + procesar_fisica(delta: float): void
}

Resource <|-- Item
Item <|-- Equipable
Item <|-- Recurso
Item <|-- Hechizo
Equipable <|-- Arma
Equipable <|-- Armadura
Arma <|-- ArmaRango
Arma <|-- ArmaMele
Arma <|-- ArmaArea

class TipoItem {
  + icono: ItemIcon
  + grupo: Grupo
  + nombre: String = "Item sin nombre"
  + clase_item: Script
  + nodo_uso: PackedScene
  + proyectil: PackedScene
  + genero: String = "a"
}

Resource <|-- TipoItem
Item *-- TipoItem

class Atributo {
  + static crear(_valor: int, _rareza: Item.Rareza): Atributo
  + descripcion(valor_base: float = 0.0): String
  + get_nombre(): String
  + calcular(valor_base: float = 0.0): float
}

Equipable -->Atributo : usa

enum Tipo {
  DAÑO
  DAÑO_PORCENTUAL
  DEFENSA
  DEFENSA_PORCENTUAL
  VELOCIDAD
  VELOCIDAD_ATAQUE
  CRITICO
  CRITICO_BONUS
  EVASION
  ALCANCE_EXTRA
}

Atributo --> Tipo


class ItemRect {
  clickeado: signal
  clickeado_secundario: signal

  - nivel_label: Label
  - atrib_label: Label

  + get_item(): Item
  + pop(): Item
  + _gui_input(event: InputEvent): void
  + _get_drag_data(_position: Vector2)
  + _drop_data(_position: Vector2, data: Variant): void
  + mover_a_slot(nuevo_slot: Control, pos_objetivo: Vector2): Signal
  + _al_entrar_mouse(): void
  + _al_salir_mouse(): void
  + borrar(): void
}

Item *-- ItemRect

@enduml